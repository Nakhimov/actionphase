"""
Django settings for actionphase project.

Generated by 'django-admin startproject' using Django 1.11.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from decouple import config

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', cast=bool)
USE_AWS = config('USE_AWS', cast=bool, default=False)
USE_PIPELINE = config('USE_PIPELINE', cast=bool, default=True)

ALLOWED_HOSTS = [
    'stage.actionpha.se',
    '192.168.99.100',
    '127.0.0.1',
    'localhost'
]

# Application definition

INSTALLED_APPS = [
    # Registration and login management
    'registration',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    # Faster collectstatic for S3 backend. Temporarily removed due to a bug
    # 'collectfast', TODO: Check this before going live
    'django.contrib.staticfiles',
    'django.core.mail',
    # Tree based models for comments
    'mptt',
    # Asset pipeline
    'pipeline',
    # S3 file storage
    'storages',
    # Markdown Support
    'markdownx',
    'backend.api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'backend.api.middleware.LoginRequiredMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            'actionphase/backend/templates'
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': 3306,
        'OPTIONS': {
            'init_command': 'SET default_storage_engine=InnoDB',
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Logging

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/tmp/debug.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/


# Registration Settings
ACCOUNT_ACTIVATION_DAYS = 7
LOGIN_REDIRECT_URL = '/games'
SIMPLE_BACKEND_REDIRECT_URL = '/games'
LOGIN_EXEMPT_URLS = (
    r'^accounts/register',
    r'^accounts/login',
    r'^accounts/password/reset',
    r'^static/'
)

# Email Settings
EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
EMAIL_FILE_PATH = '/tmp/api-messages'  # change this to a proper location

# CSS & JS Settings
AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
AWS_PRELOAD_METADATA = True
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'public, max-age=31536000',
}
if USE_AWS:
    STATICFILES_STORAGE = 'backend.storage_backends.S3PipelineStorage'
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'backend', 'api', 'static'),
        os.path.join(BASE_DIR, 'node_modules', 'vue', 'dist'),
    ]
    STATIC_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, 'static')
    DEFAULT_FILE_STORAGE = 'backend.storage_backends.S3MediaStorage'
else:
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'backend', 'api', 'static'),
        os.path.join(BASE_DIR, 'node_modules', 'vue', 'dist'),
    ]
    STATIC_URL = '/static/'
    STATICFILES_STORAGE = 'pipeline.storage.PipelineCachedStorage' if USE_PIPELINE else 'pipeline.storage' \
                                                                                        '.NonPackagingPipelineStorage'
    MEDIA_ROOT = '/media/'
    MEDIA_URL = '/media/'
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'pipeline.finders.PipelineFinder',
)

PIPELINE = {'PIPELINE_ENABLED': USE_PIPELINE and not DEBUG,
            'STYLESHEETS': {
                'main': {
                    'source_filenames': (
                        'css/bootstrap.css',
                    ),
                    'output_filename': 'css/min.css'
                },
            }, 'JAVASCRIPT': {
        'main': {
            'source_filenames': (
                'js/jquery.js',
                'js/jquery.cookie.js',
                'js/popper.js',
                'js/bootstrap.js',
                'vue.js',
            ),
            'output_filename': 'js/min.js',
        },
        'comments': {
            'source_filenames': (
                'js/comments.es6',
            ),
            'output_filename': 'js/comments.min.js'
        }
    }, 'YUGLIFY_BINARY': os.path.join(BASE_DIR, 'node_modules', 'yuglify', 'bin', 'yuglify'),
            'COMPILERS': (
                'pipeline.compilers.es6.ES6Compiler',
                'pipeline.compilers.sass.SASSCompiler',
            ),
            'BABEL_ARGUMENTS': '--presets es2015'
            }
